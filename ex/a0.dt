data Unit : * {
  | tt  : Unit
};

data Bool : * {
  | true  : Bool
  | false : Bool
};

data Nat : * {
  | Z : Nat
  | S : Nat -> Nat
};

add : Nat -> Nat -> Nat ;
add x y = 
  case x <_ => Nat> {
   | (Z)   => y
   | (S p) => S (add p y)
   } ;

-- length indexed lists
data Vec : * -> Nat -> * {
  | Nil  : (A : *) -> Vec A 0
  | Cons : (A : *) -> A -> (n : Nat) -> Vec A n -> Vec A (S n)
};

rep : (A : *) -> A -> (n : Nat) -> Vec A n ;
rep A a n = 
  case n < n' : Nat => Vec A n' >{
   | (Z)   => Nil A
   | (S p) => Cons A a p (rep A a p)
   } ;

append : (A : *) -> (n : Nat) -> Vec A n -> (m : Nat) -> Vec A m -> Vec A (add n m) ;
append A n vn m vm = 
  case n, vn < n' => _ : Vec A n' => Vec A (add n' m) >{ -- multi matching allows for definitional computation
   | (Z)   => (Nil _) => vm
   | (S _) => (Cons _ a pn pvn) => Cons A a (add pn m) (append A pn pvn m vm)
  };



mapVec : (A : *) -> (n : Nat) -> Vec A n -> (B : *) -> (A -> B) -> Vec B n ;
mapVec A n v =
  case n, v < n => _ : Vec A n => (B : *) -> (A -> B) -> Vec B n >{
   | (Z)   =>  (Nil A)          => \ B => \ _ => Nil B
   | (S _) =>  (Cons A a pn pv) => \ B => \ f => Cons B (f a) pn (mapVec A pn pv B f)
   -- should really allow (S _) to be elaborated from _.
  };

-- more examples

ex0 : Vec Bool 1 ;
ex0 = rep Bool true 1 ;

ex01 : Vec Bool 1 ;
ex01 = mapVec Bool 1 ex0 Bool not ;

ex1 : Vec Bool 5 ;
ex1 = rep Bool true 5 ;

ex2 : Vec Bool 5 ;
ex2 = mapVec Bool 5 ex1 Bool not ;

not : Bool -> Bool ;
not x = 
  case x < _ => Bool >{
   | (true)  => false
   | (false) => true
  } ;