data Bool : * {
  | true  : Bool
  | false : Bool
};

data Nat : * {
| Z : Nat
| S : Nat -> Nat
};


data Id : (A : *) -> A -> A -> * {
| refl  : (A : *) -> (a : A) -> Id A a a
};

Vert : *;
Vert = Nat ;

graph : *;
graph = Nat -> Nat -> Bool;

-- a path along a graph
data path : graph -> Vert -> Vert -> * {
  | edge : 
    (g : graph) -> 
    (u : Vert) -> 
    (v : Vert) -> 
    Id Bool (g u v) true ->
    path g u v
  | step :
    (g : graph) -> 
    (u : Vert) -> 
    (v : Vert) -> 
    path g u v ->
    (w : Vert) -> 
    Id Bool (g u v) true ->
    path g u w
};

empty : graph ;
empty x y = false;


linear : graph ;
linear x y = 
  case x, y <_ => _ => Bool> {
  | _      => (Z)   => false
  | (Z)    => (S (Z)) => true
  | (Z)    => _  => false
  | (S x') => (S y') => linear x' y'
};

p12 : path linear 1 2;
p12 = edge linear 1 2 (refl Bool true) ;

p13 : path linear 1 3;
p13 = step linear 1 2 p12 3 (refl Bool true) ;