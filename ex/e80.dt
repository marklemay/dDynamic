data Unit : * {
  | tt  : Unit
};

data Bool : * {
  | true  : Bool
  | false : Bool
};

data Nat : * {
  | Z : Nat
  | S : Nat -> Nat
};

add : Nat -> Nat -> Nat ;
add x y = 
  case x <_ => Nat> {
   | (Z)   => y
   | (S p) => S (add p y)
   } ;

-- length indexed lists
data Vec : * -> Nat -> * {
  | Nil  : (A : *) -> Vec A 0
  | Cons : (A : *) -> A -> (n : Nat) -> Vec A n -> Vec A (S n)
};

rep : (A : *) -> A -> (n : Nat) -> Vec A n ;
rep A a n = 
  case n < n' : Nat => Vec A n' >{
   | (Z)   => Nil A
   | (S p) => Cons A a p (rep A a p)
   } ;



lastB : (n : Nat) -> Vec Bool (S n) -> Bool;
lastB n v = case n, v <n => _ : Vec Bool (S n) => Bool> {
| _ => (Cons _ a (Z) _) => a
| _ => (Cons _ _ (S n') rest) => lastB n' rest
} ;
