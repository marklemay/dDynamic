module Dynamic.Ex2 where

import AlphaShow
import Data.Map (Map)
import qualified Data.Map as Map
import Data.Set (Set)
import qualified Data.Set as Set
import Dynamic.Ast
import Dynamic.Env
import Dynamic.Erase (erase, eraseCast)
import Dynamic.Helper (runC)
import Dynamic.Norm (cbvCheck)
import SourcePos
import Unbound.Generics.LocallyNameless
import UnboundHelper
import PreludeHelper
import Debug.Trace

ex =
  let 
      (u_, u_1, pn, pn1, vn, x) = (s2n "u_", s2n "u_1", s2n "pn", s2n "pn1", s2n "vn", s2n "x")
   in ( App
          ( Csym
              ( Csym
                  ( Csym
                      f
                      ( InjDcon (Step info (DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)) True (C (DConF "S" [C (C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ())))))) 0
                      )
                      (bind pn (C (Pi (C (App (TConF "Vec" [] (An (Just (TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_ (NoBnd ())))))) (C (C (Csym (V pn (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) (InjDcon (InjTcon (Trans (Trans (Trans Refl (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (App (DConF "S" [] (An (Just ("Nat", TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_ (NoBnd [])))))) (C (C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (TConF "Nat" [] (An (Just (NoBnd ()))))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)] (An (Just (NoBnd ())))) (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) 0) 0) (bind pn1 (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just TyU))) info TyU (Same TyU info TyU) TyU) (bind u_ (C (App (TConF "Vec" [] (An (Just (TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_1 (NoBnd ())))))) (C (C (Csym (V pn (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) (InjDcon (InjTcon (Trans (Trans (Trans Refl (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (App (DConF "S" [] (An (Just ("Nat", TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_1 (NoBnd [])))))) (C (C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (TConF "Nat" [] (An (Just (NoBnd ()))))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)] (An (Just (NoBnd ())))) (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) 0) 0) (bind pn1 (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just TyU))) info TyU (Same TyU info TyU) TyU))) info TyU (Same TyU info TyU) TyU))
                      (An Nothing)
                  )
                  (InjDcon (Step info (DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)) True (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) (C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ())))))) 0)
                  (bind pn (C (Pi (C (App (TConF "Vec" [] (An (Just (TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_ (NoBnd ())))))) (C (C (Csym (V pn (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) (InjDcon (InjTcon (Trans (Trans (Trans Refl (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (App (DConF "S" [] (An (Just ("Nat", TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_ (NoBnd [])))))) (C (C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (TConF "Nat" [] (An (Just (NoBnd ()))))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)] (An (Just (NoBnd ())))) (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) 0) 0) (bind pn1 (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just TyU))) info TyU (Same TyU info TyU) TyU) (bind u_ (C (App (TConF "Vec" [] (An (Just (TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_1 (NoBnd ())))))) (C (C (Csym (V pn (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) (InjDcon (InjTcon (Trans (Trans (Trans Refl (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (App (DConF "S" [] (An (Just ("Nat", TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_1 (NoBnd [])))))) (C (C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (TConF "Nat" [] (An (Just (NoBnd ()))))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)] (An (Just (NoBnd ())))) (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) 0) 0) (bind pn1 (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just TyU))) info TyU (Same TyU info TyU) TyU))) info TyU (Same TyU info TyU) TyU))
                  (An Nothing) -- thses are crraeting a "traffic Jam"
              )
              (InjDcon 
                (Step info 
                   (DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)) True 
                   (C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ())))))
                   (C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))))
                 0)
              (bind pn (C (Pi (C (App (TConF "Vec" [] (An (Just (TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_ (NoBnd ())))))) (C (C (Csym (V pn (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) (InjDcon (InjTcon (Trans (Trans (Trans Refl (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (App (DConF "S" [] (An (Just ("Nat", TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_ (NoBnd [])))))) (C (C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (TConF "Nat" [] (An (Just (NoBnd ()))))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)] (An (Just (NoBnd ())))) (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) 0) 0) (bind pn1 (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just TyU))) info TyU (Same TyU info TyU) TyU) (bind u_ (C (App (TConF "Vec" [] (An (Just (TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_1 (NoBnd ())))))) (C (C (Csym (V pn (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) (InjDcon (InjTcon (Trans (Trans (Trans Refl (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (App (DConF "S" [] (An (Just ("Nat", TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_1 (NoBnd [])))))) (C (C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (TConF "Nat" [] (An (Just (NoBnd ()))))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)] (An (Just (NoBnd ())))) (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) 0) 0) (bind pn1 (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just TyU))) info TyU (Same TyU info TyU) TyU))) info TyU (Same TyU info TyU) TyU))
              (An Nothing)
          )
          nil
          noAn
      )

exr =
  runC
    ( do
        e <- cbvCheck ex
        erase e
    )
    emptyModule
    Nothing




exr4 =
  runC
    ( do
        cbvCheck ex4
    )
    emptyModule
    Nothing

ex4 = 
  let 
    (u_, u_1, pn, pn1, vn, x) = (s2n "u_", s2n "u_1", s2n "pn", s2n "pn1", s2n "vn", s2n "x")
  in 
    Csym 
    -- nil 
    (V (s2n "x") noAn)
    (InjDcon 
                (Step info 
                   (DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)) True 
                   (C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ())))))
                   (C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))))
                 0)
                 (bind pn $ TConF "Vec" [V pn $ ann nat] (An (Just (NoBnd ()))))
                 (An Nothing)











exr3 =
  runC
    ( do
        logg "??????"
        cbvCheck ex3
    )
    emptyModule
    Nothing


ex3 =
  let 
      (u_, u_1, pn, pn1, vn, x) = (s2n "u_", s2n "u_1", s2n "pn", s2n "pn1", s2n "vn", s2n "x")
   in ( App
          ( Csym
              ( (V (s2n "x") noAn)
              )
              (InjDcon 
                (Step info 
                   (DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)) True 
                   (C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ())))))
                   (C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))))
                 0)
              (bind pn (C (Pi (C (App (TConF "Vec" [] (An (Just (TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_ (NoBnd ())))))) (C (C (Csym (V pn (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) (InjDcon (InjTcon (Trans (Trans (Trans Refl (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (App (DConF "S" [] (An (Just ("Nat", TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_ (NoBnd [])))))) (C (C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (TConF "Nat" [] (An (Just (NoBnd ()))))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)] (An (Just (NoBnd ())))) (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) 0) 0) (bind pn1 (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just TyU))) info TyU (Same TyU info TyU) TyU) (bind u_ (C (App (TConF "Vec" [] (An (Just (TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_1 (NoBnd ())))))) (C (C (Csym (V pn (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) (InjDcon (InjTcon (Trans (Trans (Trans Refl (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (App (DConF "S" [] (An (Just ("Nat", TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (bind u_1 (NoBnd [])))))) (C (C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (TConF "Nat" [] (An (Just (NoBnd ()))))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)] (An (Just (NoBnd ())))) (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) (Step info (TConF "Vec" [DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)] (An Nothing)) True (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))))) 0) 0) (bind pn1 (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)))) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU) info (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) info TyU (Same TyU info TyU) TyU)) (An (Just TyU))) info TyU (Same TyU info TyU) TyU))) info TyU (Same TyU info TyU) TyU))
              (An Nothing)
          )
          nil
          noAn
      )



exr2 =
  runC
    ( do
        cbvCheck ex2
    )
    emptyModule
    Nothing

ex2 = 
  let 
    (u_, u_1, pn, pn1, vn, x) = (s2n "u_", s2n "u_1", s2n "pn", s2n "pn1", s2n "vn", s2n "x")
  in 
    Csym 
    -- nil 
    (V (s2n "x") noAn)
    (InjDcon 
                (Step info 
                   (DConF "S" [DConF "Z" [] (An Nothing)] (An Nothing)) True 
                   (C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ())))))
                   (C (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) info (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))))
                 0)
                 (bind pn $ TConF "Vec" [V pn noAn ] (An (Just (NoBnd ()))))
                 (An Nothing)


nil = (DConF "Nil" [] (An (Just ("Vec", NoBnd [(DConF "Z" [] (An (Just ("Nat", NoBnd []))))]))))
f =  
  let 
      (u_, u_1, pn, pn1, vn, x) = (s2n "u_", s2n "u_1", s2n "pn", s2n "pn1", s2n "vn", s2n "x")
   in Fun
          ( bind (unnamed, vn) (V vn noAn)
          )
          ( An
              ( Just
                  ( TConF "Vec" [DConF "Z" [] (An (Just ("Nat", NoBnd [])))] (An (Just (NoBnd ()))),
                    bind
                      unnamed
                      ( TConF "Vec" [DConF "Z" [] (An (Just ("Nat", NoBnd [])))] (An (Just (NoBnd ())))
                      )
                  )
              )
          )

nat = TConF "Nat" [] (ann (NoBnd ()))


info = Info debugSR Base Map.empty (ignore TyU) (ignore TyU)