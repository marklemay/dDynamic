module Dynamic.Ex where
import Unbound.Generics.LocallyNameless
import Dynamic.Ast
import UnboundHelper
import Dynamic.Helper (runC)
import Dynamic.Norm (cbvCheck)
import Dynamic.Env

ex = C (C (DConF "Cons" [C (DConF "tt" [] (An (Just ("Unit", NoBnd [])))) Dummy (TConF "Unit" [] (An (Just (NoBnd ())))) (TConF "Unit" [] (An Nothing)) (TConF "Unit" [] (An (Just (NoBnd ())))), C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Vec", NoBnd [C (App (DConF "S" [] (An (Just ("Nat", TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU) (bind unnamed (NoBnd [])))))) (C (C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) Dummy (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU) Dummy (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) (An (Just (TConF "Nat" [] (An (Just (NoBnd ()))))))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)])))) Dummy (TConF "Vec" [C (App (DConF "S" [] (An (Just ("Nat", TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU) (bind unnamed (NoBnd [])))))) (C (C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) Dummy (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU) Dummy (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) (An (Just (TConF "Nat" [] (An (Just (NoBnd ()))))))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)] (An (Just (NoBnd ())))) (TConF "Vec" [Same (C (App (DConF "S" [] (An (Just ("Nat", TelBnd (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU) (bind unnamed (NoBnd [])))))) (C (C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) Dummy (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU) (Same (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU) Dummy (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) (An (Just (TConF "Nat" [] (An (Just (NoBnd ()))))))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (Same (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) (C (TConF "Nat" [] (An (Just (NoBnd ())))) Dummy TyU (Same TyU Dummy TyU) TyU)) Dummy (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ())))))] (An Nothing)) (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ()))))) Dummy (TConF "Vec" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ())))) (TConF "Vec" [Same (C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))) Dummy (C (DConF "S" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ())))))] (An Nothing)) (TConF "Vec" [C (DConF "S" [C (DConF "S" [C (DConF "Z" [] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just ("Nat", NoBnd [])))) Dummy (TConF "Nat" [] (An (Just (NoBnd ())))) (TConF "Nat" [] (An Nothing)) (TConF "Nat" [] (An (Just (NoBnd ()))))] (An (Just (NoBnd ()))))

exr = runC (cbvCheck ex) emptyModule Nothing
